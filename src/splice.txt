{data.components.map((comp, componentIndex) => (
  <g key={comp.id}>
    {/* Regular components (Rectangles) */}
    {comp.category !== "Splice" && comp.shape === "rectangle" && (
      <rect
        x={getXForComponent(comp)}
        y={getYForComponent(comp)}
        width={getWidthForComponent(comp)}
        height={componentSize.height}
        fill="lightblue"
        stroke="black"
        strokeDasharray={componentIndex !== 0 ? "6,4" : undefined}
      />
    )}
    {/* Splice nodes: Draw each connector as a circle */}
    {comp.category === "Splice" && comp.connectors.length === 1 && (
      <>
        <circle
          cx={getXForConnector(comp.connectors[0], comp) + getWidthForConnector(comp.connectors[0]) / 2}
          cy={getYForConnector(comp.connectors[0], comp) + 10}
          r={12}
          fill="lightgreen"
          stroke="black"
          strokeDasharray="6,4"
        />
        <text
          x={getXForConnector(comp.connectors[0], comp) + getWidthForConnector(comp.connectors[0]) / 2}
          y={getYForConnector(comp.connectors[0], comp) + 16}
          textAnchor="middle"
          fontSize="12"
          fill="black"
        >
          {comp.connectors[0].label}
        </text>
      </>
    )}
    {/* For multi-terminal splices, draw connected dots */}
    {comp.category === "Splice" && comp.connectors.length > 1 &&
      comp.connectors.map((conn, connIndex) => (
        <g key={conn.id}>
          <circle
            cx={getXForConnector(conn, comp) + getWidthForConnector(conn) / 2}
            cy={getYForConnector(conn, comp) + 10}
            r={12}
            fill="lightgreen"
            stroke="black"
            strokeDasharray="6,4"
          />
          <text
            x={getXForConnector(conn, comp) + getWidthForConnector(conn) / 2}
            y={getYForConnector(conn, comp) + 16}
            textAnchor="middle"
            fontSize="12"
            fill="black"
          >
            {conn.label}
          </text>
        </g>
      ))
    }
    {/* Existing label logic for rectangles */}
    {comp.category !== "Splice" && (
      <text
        ref={el => componentNameRefs.current[comp.id] = el}
        x={getXForComponentTitle(comp)}
        y={getYForComponent(comp) + componentSize.height / 2}
        textAnchor="middle"
        fontSize="12"
        fill="black"
      >
        {comp.label + ` (${comp.id})`}
      </text>
    )}
  </g>
))}
