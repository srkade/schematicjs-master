

previous code from app.tsx
import React from "react";
import Schematic from "./Schematic";

const B3 = {
  components: [
    {
      id: "B3",
      label: "Coolant Temperature sensor",
      category: "Sensor",
      shape: "rectangle",
      connectors: [
        {
          id: "XB3",
          label: "XB3",
        },
      ],
    },
    {
      id: "ICC",
      label: "Instrument Cluster Controller",
      category: "Transistor",
      shape: "rectangle",
      connectors: [
        {
          id: "XJ1",
          label: "XJ1",
        },
      ],
    },
  ],
  connections: [
    {
      color: "orange",
      from: {
        componentId: "B3",
        connectorId: "XB3",
        cavity: "1",
      },
      to: {
        componentId: "ICC",
        connectorId: "XJ1",
        cavity: "16",
      },
      label: "",
    },
  ],
};

const S4 = {
  components: [
    {
      id: "S4",
      label: "Seat Switch",
      category: "Switch",
      shape: "rectangle",
      connectors: [
        {
          id: "XS4",
          label: "XS4",
        },
      ],
    },
    {
      id: "SPL1",
      label: "Splice",
      category: "Splice",
      shape: "circle",
      connectors: [
        {
          id: "XSP_500",
          label: "XSP_500",
        },
      ],
    },
    {
      id: "ICC",
      label: "Instrument Cluster Controller",
      category: "Instrument",
      shape: "rectangle",
      connectors: [
        {
          id: "XJ2",
          label: "XJ2",
        },
      ],
    },
  ],
  connections: [
    {
      color: "yellow",
      from: {
        componentId: "S4",
        connectorId: "XS4",
        cavity: "2",
      },
      to: {
        componentId: "SPL1",
        connectorId: "XSP_500",
        cavity: "L",
      },
      label: "",
    },
    {
      color: "pink",
      from: {
        componentId: "ICC",
        connectorId: "XJ2",
        cavity: "3",
      },
      to: {
        componentId: "S4",
        connectorId: "XS4",
        cavity: "4",
      },
      label: "",
    },
  ],
};

const S9 = {
  components: [
    {
      id: "S9",
      label: "Light switch",
      category: "Switch",
      shape: "rectangle",
      connectors: [
        {
          id: "XS9",
          label: "XS9",
        },
      ],
    },
    {
      id: "SPL1",
      label: "Splice",
      category: "Splice",
      shape: "circle",
      connectors: [
        {
          id: "XSP_450",
          label: "XSP_450",
        },
      ],
    },
    {
      id: "ICC",
      label: "Instrument Cluster Controller",
      category: "Instrument",
      shape: "rectangle",
      connectors: [
        {
          id: "XJ1",
          label: "XJ1",
        },
      ],
    },
    {
      id: "LC",
      label: "Load Center",
      category: "Instrument",
      shape: "rectangle",
      connectors: [
        {
          id: "X90",
          label: "X90",
        },
      ],
    },
    {
      id: "HR",
      label: "Headlight relay",
      category: "Instrument",
      shape: "rectangle",
      connectors: [
        {
          id: "XK3",
          label: "XK3",
        },
      ],
    },
  ],
  connections: [
    {
      color: "yellow",
      from: {
        componentId: "S9",
        connectorId: "XS9",
        cavity: "B",
      },
      to: {
        componentId: "SPL1",
        connectorId: "XSP_450",
        cavity: "L",
      },
      label: "",
    },
    {
      color: "pink",
      from: {
        componentId: "ICC",
        connectorId: "XJ1",
        cavity: "12",
      },
      to: {
        componentId: "S9",
        connectorId: "XS9",
        cavity: "C",
      },
      label: "",
    },
    {
      color: "yellow",
      from: {
        componentId: "LC",
        connectorId: "X90",
        cavity: "47",
      },
      to: {
        componentId: "S9",
        connectorId: "XS9",
        cavity: "D",
      },
      label: "",
    },
    {
      color: "green",
      from: {
        componentId: "HR",
        connectorId: "XK3",
        cavity: "19",
      },
      to: {
        componentId: "S9",
        connectorId: "XS9",
        cavity: "1",
      },
      label: "",
    },
  ],
};

const S8 = {
  components: [
    {
      id: "S8",
      label: "Brake switch",
      category: "Switch",
      shape: "rectangle",
      connectors: [
        {
          id: "XS8",
          label: "XS8",
        },
      ],
    },
    {
      id: "SPL1",
      label: "Splice",
      category: "Splice",
      shape: "circle",
      connectors: [
        {
          id: "XSP_500",
          label: "XSP_500",
        },
        {
          id: "XSP_767",
          label: "XSP_767",
        },
      ],
    },
    {
      id: "ICC",
      label: "Instrument Cluster Controller",
      category: "Instrument",
      shape: "rectangle",
      connectors: [
        {
          id: "XJ2",
          label: "XJ2",
        },
      ],
    },
  ],
  connections: [
    {
      color: "yellow",
      from: {
        componentId: "S8",
        connectorId: "XS8",
        cavity: "5",
      },
      to: {
        componentId: "SPL1",
        connectorId: "XSP_500",
        cavity: "L",
      },
      label: "",
    },
    {
      color: "violet",
      from: {
        componentId: "S8",
        connectorId: "XS8",
        cavity: "1",
      },
      to: {
        componentId: "SPL1",
        connectorId: "XSP_767",
        cavity: "L",
      },
      label: "",
    },
    {
      color: "violet",
      from: {
        componentId: "ICC",
        connectorId: "XJ2",
        cavity: "3",
      },
      to: {
        componentId: "S8",
        connectorId: "XS8",
        cavity: "1",
      },
      label: "",
    },
  ],
};




{data.components.map((comp, componentIndex) => (
  <g key={comp.id}>
    {/* Regular components (Rectangles) */}
    {comp.category !== "Splice" && comp.shape === "rectangle" && (
      <rect
        x={getXForComponent(comp)}
        y={getYForComponent(comp)}
        width={getWidthForComponent(comp)}
        height={componentSize.height}
        fill="lightblue"
        stroke="black"
        strokeDasharray={componentIndex !== 0 ? "6,4" : undefined}
      />
    )}
    {/* Splice nodes: Draw each connector as a circle */}
    {comp.category === "Splice" && comp.connectors.length === 1 && (
      <>
        <circle
          cx={getXForConnector(comp.connectors[0], comp) + getWidthForConnector(comp.connectors[0]) / 2}
          cy={getYForConnector(comp.connectors[0], comp) + 10}
          r={12}
          fill="lightgreen"
          stroke="black"
          strokeDasharray="6,4"
        />
        <text
          x={getXForConnector(comp.connectors[0], comp) + getWidthForConnector(comp.connectors[0]) / 2}
          y={getYForConnector(comp.connectors[0], comp) + 16}
          textAnchor="middle"
          fontSize="12"
          fill="black"
        >
          {comp.connectors[0].label}
        </text>
      </>
    )}
    {/* For multi-terminal splices, draw connected dots */}
    {comp.category === "Splice" && comp.connectors.length > 1 &&
      comp.connectors.map((conn, connIndex) => (
        <g key={conn.id}>
          <circle
            cx={getXForConnector(conn, comp) + getWidthForConnector(conn) / 2}
            cy={getYForConnector(conn, comp) + 10}
            r={12}
            fill="lightgreen"
            stroke="black"
            strokeDasharray="6,4"
          />
          <text
            x={getXForConnector(conn, comp) + getWidthForConnector(conn) / 2}
            y={getYForConnector(conn, comp) + 16}
            textAnchor="middle"
            fontSize="12"
            fill="black"
          >
            {conn.label}
          </text>
        </g>
      ))
    }
    {/* Existing label logic for rectangles */}
    {comp.category !== "Splice" && (
      <text
        ref={el => componentNameRefs.current[comp.id] = el}
        x={getXForComponentTitle(comp)}
        y={getYForComponent(comp) + componentSize.height / 2}
        textAnchor="middle"
        fontSize="12"
        fill="black"
      >
        {comp.label + ` (${comp.id})`}
      </text>
    )}
  </g>
))}
